version: "3.8"

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-levantis}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-levantis} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server","--appendonly","yes"]
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./apps/levantis-api
      dockerfile: DockerfileProd
    restart: unless-stopped
    env_file:
      - ./.env.prod
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST:-db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-levantis}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: ${REDIS_HOST:-redis}
      DJANGO_DEBUG: "0"
      DJANGO_ALLOWED_HOSTS: "${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1,nginx,web}"
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-config.settings}
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "8000"
    volumes:
      - static:/app/staticfiles
      - media:/app/mediafiles
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python - <<'PY'\nimport urllib.request,sys\nURL='http://localhost:8000/api/health/'\ntry:\n  r=urllib.request.urlopen(URL, timeout=5)\n  sys.exit(0 if r.getcode()==200 else 1)\nexcept Exception as e:\n  print(e)\n  sys.exit(1)\nPY"
        ]
      interval: 10s
      timeout: 5s
      retries: 60
      start_period: 120s

  web:
    build:
      context: ./apps/levantis-web
      dockerfile: DockerfileProd
    restart: unless-stopped
    env_file:
      - ./.env.prod
    environment:
      NODE_ENV: "production"
      PORT: "3000"
      LEVANTIS_API_BASE: "http://nginx/api"
    depends_on:
      api:
        condition: service_started
    expose:
      - "3000"

  nginx:
    image: nginx:1.27-alpine
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
      web:
        condition: service_started
    ports:
      - "80:80"   # change to "8080:80" if port 80 busy locally
    volumes:
      - ./infra/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static:/var/www/static:ro
      - media:/var/www/media:ro

volumes:
  db_data:
  static:
  media: