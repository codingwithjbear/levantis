# Dockerfile for production build of Levantis Web (Next.js)
# Uses multi-stage builds to optimize final image size
# Reference: https://nextjs.org/docs/deployment#docker-image
# Note: Ensure .dockerignore excludes node_modules, .next, etc. for efficiency
# -----------------------------
# 1) Dependencies
# -----------------------------
FROM node:20-alpine AS deps
WORKDIR /app
COPY package.json package-lock.json* ./
RUN npm ci

# -----------------------------
# 2) Build
# -----------------------------
FROM node:20-alpine AS builder
WORKDIR /app
ENV NEXT_TELEMETRY_DISABLED=1
COPY --from=deps /app/node_modules ./node_modules
COPY . .
# Keep your existing build script (uses Next's build per your package.json)
RUN npm run build

# -----------------------------
# 3) Runtime (standalone)
# -----------------------------
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create runtime user
RUN addgroup -g 1001 -S nodejs && adduser -S nextjs -u 1001

# Copy build artifacts and ensure nextjs owns/reads them
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Extra safety: normalize perms so files are world-readable and dirs traversable
RUN chmod -R a+rX /app

USER nextjs
EXPOSE 3000
ENV PORT=3000
CMD ["node", "server.js"]